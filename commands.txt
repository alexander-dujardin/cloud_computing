npm init -y voor package json
npm install voor package json lock
node server.js run app
------------------------------------------
docker network create cloud-computing-network
cd frontend-backend
docker build -t front-backend-image .
docker run --network=cloud-computing-network --name=front-backend-container -e TZ=Europe/Brussels -p 3000:3000 front-backend-image
cd ..
cd image-predict
docker build -t predict-image .
docker run --network=cloud-computing-network --name=image-predict-container -p 8002:8002 predict-image

docker pull mysql
docker run --network=cloud-computing-network --name mysql-container -e TZ=Europe/Brussels -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=images -p 3306:3306 -d mysql:latest
docker exec -it mysql-container mysql -uroot -p
USE images;
CREATE TABLE images_table (
    id INT PRIMARY KEY AUTO_INCREMENT,
    image LONGTEXT NOT NULL,
    creation_date DATETIME NOT NULL,
    upload_zone INT NOT NULL,
    head_count INT NOT NULL
);


kubectl exec -it frontend-backend-5875b64dbf-lbq6h -- bash

minikube service --all
-------------------------------------------------------------------------------------
cd mysql-kube
kubectl apply -f mysql-pv.yaml
kubectl apply -f mysql-pvc.yaml
kubectl apply -f mysql-configmap.yaml
kubectl apply -f mysql-deployment.yaml
kubectl apply -f mysql-service.yaml

kubectl get all

kubectl exec -it <pod name> -- mysql -uroot -p

USE images;
CREATE TABLE images_table (
    id INT PRIMARY KEY AUTO_INCREMENT,
    image LONGTEXT NOT NULL,
    creation_date DATETIME NOT NULL,
    upload_zone INT NOT NULL,
    head_count INT NOT NULL
);

cd image-predict

kubectl apply -f image-predict-deployment.yaml

kubectl get all

cd frontend-backend

kubectl apply -f frontend-backend-deployment.yaml

kubectl get all

minikube service --all (minikube tunnel)